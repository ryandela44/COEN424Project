# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class ScannedItem(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, scanned_item_id: str=None, item_id: str=None, quantity: int=None, price: float=None):  # noqa: E501
        """ScannedItem - a model defined in Swagger

        :param scanned_item_id: The scanned_item_id of this ScannedItem.  # noqa: E501
        :type scanned_item_id: str
        :param item_id: The item_id of this ScannedItem.  # noqa: E501
        :type item_id: str
        :param quantity: The quantity of this ScannedItem.  # noqa: E501
        :type quantity: int
        :param price: The price of this ScannedItem.  # noqa: E501
        :type price: float
        """
        self.swagger_types = {
            'scanned_item_id': str,
            'item_id': str,
            'quantity': int,
            'price': float
        }

        self.attribute_map = {
            'scanned_item_id': 'ScannedItemID',
            'item_id': 'ItemID',
            'quantity': 'Quantity',
            'price': 'Price'
        }
        self._scanned_item_id = scanned_item_id
        self._item_id = item_id
        self._quantity = quantity
        self._price = price

    @classmethod
    def from_dict(cls, dikt) -> 'ScannedItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScannedItem of this ScannedItem.  # noqa: E501
        :rtype: ScannedItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scanned_item_id(self) -> str:
        """Gets the scanned_item_id of this ScannedItem.


        :return: The scanned_item_id of this ScannedItem.
        :rtype: str
        """
        return self._scanned_item_id

    @scanned_item_id.setter
    def scanned_item_id(self, scanned_item_id: str):
        """Sets the scanned_item_id of this ScannedItem.


        :param scanned_item_id: The scanned_item_id of this ScannedItem.
        :type scanned_item_id: str
        """

        self._scanned_item_id = scanned_item_id

    @property
    def item_id(self) -> str:
        """Gets the item_id of this ScannedItem.


        :return: The item_id of this ScannedItem.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id: str):
        """Sets the item_id of this ScannedItem.


        :param item_id: The item_id of this ScannedItem.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def quantity(self) -> int:
        """Gets the quantity of this ScannedItem.


        :return: The quantity of this ScannedItem.
        :rtype: int
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity: int):
        """Sets the quantity of this ScannedItem.


        :param quantity: The quantity of this ScannedItem.
        :type quantity: int
        """

        self._quantity = quantity

    @property
    def price(self) -> float:
        """Gets the price of this ScannedItem.


        :return: The price of this ScannedItem.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price: float):
        """Sets the price of this ScannedItem.


        :param price: The price of this ScannedItem.
        :type price: float
        """

        self._price = price
